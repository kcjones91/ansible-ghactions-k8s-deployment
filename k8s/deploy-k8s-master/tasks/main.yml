---
# roles/k8s-master/tasks/main.yml

- name: Check if running on Fedora
  ansible.builtin.fail:
    msg: "This playbook is designed for Fedora systems only"
  when: ansible_distribution != "Fedora"

- name: Update system packages
  ansible.builtin.dnf:
    name: "*"
    state: latest

- name: Install system dependencies and SELinux packages
  ansible.builtin.dnf:
    name:
      - bridge-utils
      - iproute-tc
      - iptables
      - curl
      - gnupg
      - python3-libselinux
      - python3-policycoreutils
    state: present

- name: Configure SELinux to permissive mode
  ansible.posix.selinux:
    policy: targeted
    state: permissive
  register: selinux_changed

- name: Reboot if SELinux changed
  ansible.builtin.reboot:
    msg: "Rebooting due to SELinux change"
    reboot_timeout: 300
  when: selinux_changed.changed

- name: Check if Kubernetes repository exists
  ansible.builtin.stat:
    path: /etc/yum.repos.d/kubernetes.repo
  register: k8s_repo_exists

- name: Add Kubernetes repository GPG key
  ansible.builtin.rpm_key:
    key: "https://pkgs.k8s.io/core:/stable:/v{{ kubernetes_version }}/rpm/repodata/repomd.xml.key"
    state: present
  when: not k8s_repo_exists.stat.exists

- name: Add Kubernetes repository
  ansible.builtin.yum_repository:
    name: kubernetes
    description: Kubernetes Repository
    baseurl: "https://pkgs.k8s.io/core:/stable:/v{{ kubernetes_version }}/rpm/"
    enabled: yes
    gpgcheck: yes
    gpgkey: "https://pkgs.k8s.io/core:/stable:/v{{ kubernetes_version }}/rpm/repodata/repomd.xml.key"
  when: not k8s_repo_exists.stat.exists
    
- name: Install Kubernetes packages
  ansible.builtin.dnf:
    name:
      - containerd
      - kubelet
      - kubeadm
      - kubectl
    state: present
    disable_excludes: kubernetes

- name: Configure firewall for Kubernetes master
  ansible.posix.firewalld:
    port: "{{ item }}"
    permanent: yes
    state: enabled
    immediate: yes
  become: yes
  loop:
    - "6443/tcp"      # Kubernetes API server
    - "2379-2380/tcp" # etcd server client API  
    - "10250/tcp"     # Kubelet API
    - "10259/tcp"     # kube-scheduler
    - "10257/tcp"     # kube-controller-manager
    - "8472/udp"      # Flannel VXLAN

- name: Disable swap permanently
  ansible.builtin.command: swapoff -a
  changed_when: false
  
- name: Remove swap from fstab
  ansible.builtin.lineinfile:
    path: /etc/fstab
    regexp: '.*swap.*'
    state: absent
    
- name: Load required kernel modules
  community.general.modprobe:
    name: "{{ item }}"
    state: present
  loop:
    - overlay
    - br_netfilter
  register: modules_loaded
  failed_when: false
  
- name: Verify kernel modules loaded
  ansible.builtin.shell: lsmod | grep {{ item }}
  loop:
    - overlay
    - br_netfilter
  register: module_check
  failed_when: module_check.rc != 0
  changed_when: false
    
- name: Configure kernel modules to load on boot
  ansible.builtin.lineinfile:
    path: /etc/modules-load.d/k8s.conf
    line: "{{ item }}"
    create: yes
    mode: '0644'
  loop:
    - overlay
    - br_netfilter
    
- name: Configure sysctl for Kubernetes
  ansible.posix.sysctl:
    name: "{{ item.name }}"
    value: "{{ item.value }}"
    state: present
    reload: yes
    sysctl_file: /etc/sysctl.d/k8s.conf
  loop:
    - { name: "net.bridge.bridge-nf-call-iptables", value: "1" }
    - { name: "net.bridge.bridge-nf-call-ip6tables", value: "1" }
    - { name: "net.ipv4.ip_forward", value: "1" }
    
- name: Check if containerd config exists
  ansible.builtin.stat:
    path: /etc/containerd/config.toml
  register: containerd_config_exists

- name: Create containerd config directory
  ansible.builtin.file:
    path: /etc/containerd
    state: directory
    mode: '0755'
  when: not containerd_config_exists.stat.exists

- name: Generate default containerd config
  ansible.builtin.shell: containerd config default > /etc/containerd/config.toml
  when: not containerd_config_exists.stat.exists
  register: containerd_config_generated

- name: Configure containerd to use systemd cgroup driver
  ansible.builtin.replace:
    path: /etc/containerd/config.toml
    regexp: 'SystemdCgroup = false'
    replace: 'SystemdCgroup = true'
  register: containerd_config_changed
    
- name: Start and enable containerd
  ansible.builtin.systemd:
    name: containerd
    state: started
    enabled: yes
    daemon_reload: yes

- name: Restart containerd if config changed
  ansible.builtin.systemd:
    name: containerd
    state: restarted
  when: containerd_config_changed.changed or containerd_config_generated.changed
  
- name: Verify containerd is running
  ansible.builtin.systemd:
    name: containerd
  register: containerd_status
  failed_when: containerd_status.status.ActiveState != "active"
    
- name: Enable kubelet service
  ansible.builtin.systemd:
    name: kubelet
    enabled: yes
    
- name: Check if cluster is already initialized
  ansible.builtin.stat:
    path: /etc/kubernetes/admin.conf
  register: k8s_admin_conf
  
- name: Initialize Kubernetes cluster
  ansible.builtin.command: >
    kubeadm init
    --pod-network-cidr={{ pod_network_cidr }}
    --cri-socket=unix:///var/run/containerd/containerd.sock
  register: kubeadm_init
  when: not k8s_admin_conf.stat.exists
  failed_when: 
    - kubeadm_init.rc != 0
    - "'already exists' not in kubeadm_init.stderr"
  
- name: Create .kube directory
  ansible.builtin.file:
    path: /home/{{ ansible_user }}/.kube
    state: directory
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: '0755'
    
- name: Copy admin.conf to user's kube config
  ansible.builtin.copy:
    src: /etc/kubernetes/admin.conf
    dest: /home/{{ ansible_user }}/.kube/config
    remote_src: yes
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: '0644'
    
- name: Wait for Kubernetes API to be ready
  ansible.builtin.uri:
    url: "https://{{ ansible_default_ipv4.address }}:6443/healthz"
    validate_certs: no
    client_cert: /etc/kubernetes/pki/apiserver-kubelet-client.crt
    client_key: /etc/kubernetes/pki/apiserver-kubelet-client.key
  register: k8s_api_check
  until: k8s_api_check.status == 200
  retries: 30
  delay: 10
  when: not k8s_admin_conf.stat.exists
    
- name: Install Flannel CNI
  ansible.builtin.shell: |
    kubectl apply -f https://github.com/flannel-io/flannel/releases/latest/download/kube-flannel.yml
  become_user: "{{ ansible_user }}"
  environment:
    KUBECONFIG: /home/{{ ansible_user }}/.kube/config
  when: not k8s_admin_conf.stat.exists
  register: flannel_install
  until: flannel_install.rc == 0
  retries: 3
  delay: 10
  
- name: Generate join command
  ansible.builtin.shell: kubeadm token create --print-join-command
  register: join_command
  
- name: Save join command to shared file (secure permissions)
  ansible.builtin.copy:
    content: "{{ join_command.stdout }}"
    dest: "{{ k8s_join_command_file }}"
    mode: '0600'
    owner: root
    group: root
  when: join_command is defined and join_command.stdout != ""
    
- name: Save join command to control machine
  ansible.builtin.fetch:
    src: "{{ k8s_join_command_file }}"
    dest: "{{ k8s_join_command_local }}"
    flat: yes
  when: join_command is defined and join_command.stdout != ""
    
- name: Display join command
  ansible.builtin.debug:
    msg: "Join command: {{ join_command.stdout }}"
  when: join_command is defined