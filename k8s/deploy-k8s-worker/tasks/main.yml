---
# roles/k8s-worker/tasks/main.yml - Clean Fedora CRI-O Version

- name: Check if running on Fedora
  ansible.builtin.fail:
    msg: "This playbook is designed for Fedora systems only"
  when: ansible_distribution != "Fedora"

- name: Update system packages
  ansible.builtin.dnf:
    name: "*"
    state: latest
    use_backend: dnf4

- name: Disable swap (zram on Fedora)
  ansible.builtin.systemd:
    name: swap-create@zram0
    state: stopped
    enabled: no
  ignore_errors: true

- name: Remove zram-generator-defaults
  ansible.builtin.dnf:
    name: zram-generator-defaults
    state: absent
  ignore_errors: true

- name: Configure SELinux to permissive mode
  ansible.posix.selinux:
    policy: targeted
    state: permissive
  register: selinux_changed

- name: Reboot if SELinux changed
  ansible.builtin.reboot:
    msg: "Rebooting due to SELinux change"
    reboot_timeout: 300
  when: selinux_changed.changed

- name: Install required system packages
  ansible.builtin.dnf:
    name:
      - iptables
      - iproute-tc
      - python3-libselinux
      - python3-policycoreutils
    state: present
    use_backend: dnf4

- name: Configure kernel modules to load on boot
  ansible.builtin.copy:
    content: |
      overlay
      br_netfilter
    dest: /etc/modules-load.d/k8s.conf
    mode: '0644'

- name: Load required kernel modules
  community.general.modprobe:
    name: "{{ item }}"
    state: present
  loop:
    - overlay
    - br_netfilter

- name: Configure sysctl parameters for Kubernetes
  ansible.builtin.copy:
    content: |
      net.bridge.bridge-nf-call-iptables = 1
      net.bridge.bridge-nf-call-ip6tables = 1
      net.ipv4.ip_forward = 1
    dest: /etc/sysctl.d/k8s.conf
    mode: '0644'

- name: Apply sysctl parameters
  ansible.builtin.command: sysctl --system

- name: Install runtime dependencies
  ansible.builtin.dnf:
    name: "{{ runtime_dependencies }}"
    state: present
    use_backend: dnf4

- name: Install container runtime (Fedora docs step 1)
  ansible.builtin.dnf:
    name: "{{ container_runtime_packages }}"
    state: present
    use_backend: dnf4

- name: Install Fedora versioned Kubernetes packages (Fedora docs step 2)
  ansible.builtin.dnf:
    name: "{{ kubernetes_packages }}"
    state: present
    use_backend: dnf4

- name: Configure firewall for Kubernetes worker
  ansible.posix.firewalld:
    port: "{{ item }}"
    permanent: yes
    state: enabled
    immediate: yes
  loop: "{{ worker_firewall_ports }}"

- name: Enable IP forwarding in firewall
  ansible.posix.firewalld:
    masquerade: yes
    permanent: yes
    state: enabled
    immediate: yes

- name: Start and enable CRI-O
  ansible.builtin.systemd:
    name: crio
    state: started
    enabled: yes

# - name: Create crictl configuration for CRI-O
#   ansible.builtin.copy:
#     content: |
#       runtime-endpoint: unix:///var/run/crio/crio.sock
#       image-endpoint: unix:///var/run/crio/crio.sock
#       timeout: 2
#       debug: false
#     dest: /etc/crictl.yaml
#     mode: '0644'

- name: Enable kubelet service
  ansible.builtin.systemd:
    name: kubelet
    enabled: yes

- name: Check if node is already joined
  ansible.builtin.stat:
    path: /etc/kubernetes/kubelet.conf
  register: kubelet_conf

- name: Wait for join command file
  ansible.builtin.wait_for:
    path: ./k8s-join-command
    timeout: 300
  delegate_to: localhost
  when: not kubelet_conf.stat.exists
  become: false

- name: Read join command
  ansible.builtin.slurp:
    src: ./k8s-join-command
  register: join_command_content
  delegate_to: localhost
  when: not kubelet_conf.stat.exists
  become: false

- name: Join worker node to cluster
  ansible.builtin.shell: "{{ join_command_content.content | b64decode | trim }}"
  when: 
    - not kubelet_conf.stat.exists
    - join_command_content is defined